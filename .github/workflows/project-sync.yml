name: project-sync
on:
  issues:
    types: [opened, labeled]

permissions:
  contents: read
  issues: write
  # repository-projects: write ← あっても害はないが、PATを使うので実質不要

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        env:
          OWNER: ${{ github.repository_owner }}
          PROJECT_NUMBER: 1          # ← URLの  /projects/1  の “1”
          STATUS_FIELD: Status
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}   # ← 追加！
          script: |
            const owner = process.env.OWNER;
            const projectNumber = parseInt(process.env.PROJECT_NUMBER, 10);
            const label = context.payload.label ? context.payload.label.name : null;

            const map = {
              "stage:research": "Research",
              "stage:summary":  "Summary",
              "stage:plan":     "Plan",
              "stage:review":   "Review",
              "stage:done":     "Done"
            };

            const q = await github.graphql(`
              query($owner:String!, $num:Int!){
                user(login:$owner){
                  projectV2(number:$num){
                    id
                    fields(first:50){
                      nodes{
                        __typename
                        ... on ProjectV2FieldCommon { id name }
                      }
                    }
                  }
                }
              }`, { owner, num: projectNumber });

            const proj = q.user?.projectV2;
            if (!proj) { core.setFailed('User Project not found. Check token scope/number.'); return; }
            const projectId = proj.id;
            const statusField = (proj.fields?.nodes || []).find(f => f.name === process.env.STATUS_FIELD);
            if (!statusField) { core.setFailed('Status field not found'); return; }

            const issueNodeId = context.payload.issue.node_id;
            const addRes = await github.graphql(`
              mutation($projectId:ID!,$contentId:ID!){
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } }
              }`, { projectId, contentId: issueNodeId });
            const itemId = addRes.addProjectV2ItemById.item.id;

            if (label && map[label]) {
              const optRes = await github.graphql(`
                query($fid:ID!){
                  node(id:$fid){ ... on ProjectV2SingleSelectField { options { id name } } }
                }`, { fid: statusField.id });
              const target = (optRes.node.options || []).find(o => o.name === map[label]);
              if (!target) { core.setFailed('Status option not found: ' + map[label]); return; }

              await github.graphql(`
                mutation($projectId:ID!,$itemId:ID!,$fieldId:ID!,$opt:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ singleSelectOptionId:$opt }
                  }){ projectV2Item { id } }
                }`, { projectId, itemId, fieldId: statusField.id, opt: target.id });
            }
